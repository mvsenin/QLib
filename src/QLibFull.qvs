// Autogenerated QLib Full Library 
/*******************************************************************************
	Data profiling procedure calculated data quality measures and KPIs

    Version: 0.2
    Author: Maksim Senin
    Date created: 2022-04-27
    Date modified: 2022-06-30
    Desription:
	Data Profiling logic, universal for any data model.
    Each measure is calculated for each field individually.

	Usage sample:
		Call CreateDataProfiling;
--------------------------------------------------------------------------------
    Version: 0.2
    Author: Maksim Senin
    Date modified: 2022-06-30
    Changes:
    - Added KPI formulas logic
    - Added the following measures and KPIs:
        Min/Max number values
		No. of key fields
        No. of filled fields
        No, of tables
        Mode()
        Median()
        Avg()
        No. of 100% filled rows
        Absolute and Percentage values
        Whitespace Values
        Zero values
        EPV (Expected Population Value) data quality index
        Whitespaces in the end
--------------------------------------------------------------------------------
    Version: 0.1
    Author: Maksim Senin
    Date modified: 2022-06-30
    Changes:
    - Initial version
*******************************************************************************/

Sub CreateDataProfiling
	// UI variables for data profiling
	Let vShownValues = 'Absolute';
	Let vAbsoluteFormat = '#' & chr(160) & '##0';
	Let vPercentageFormat = '#' & chr(160) & '##0,0%';

    // Stats table name for Load
    Let CreateDataProfiling_sStatsTable = 'DataProfilingStats: NoConcatenate';

    Let CreateDataProfiling_sFieldIndex = -1; // Indicator of empty data model

    // Go through tables
    for CreateDataProfiling_sTableIndex = 0 to NoOfTables()-1

        // Get table name
        Let CreateDataProfiling_sTableName = TableName(CreateDataProfiling_sTableIndex);
        Trace $(CreateDataProfiling_sTableIndex) - $(CreateDataProfiling_sTableName);

        // Go through fields of the table
        for CreateDataProfiling_sFieldIndex = 1 to NoOfFields(CreateDataProfiling_sTableName)

            // Get field name
            Let CreateDataProfiling_sFieldName = FieldName(CreateDataProfiling_sFieldIndex, CreateDataProfiling_sTableName);
            Trace |  >  $(CreateDataProfiling_sFieldIndex) - $(CreateDataProfiling_sFieldName);

            // Load table and field name for stats table
            tmpDataProfilingStat:
            Load
                '$(CreateDataProfiling_sTableName)' as [Table Name]
                , '$(CreateDataProfiling_sFieldName)' as [Field Name]
                , NoOfRows('$(CreateDataProfiling_sTableName)') as [No. of rows]
            AutoGenerate 1;

            // Calculate and join statistics
            Left Join(tmpDataProfilingStat)
            Load
                Count([$(CreateDataProfiling_sFieldName)]) as Count
                , Count(Distinct [$(CreateDataProfiling_sFieldName)]) as [Distinct Values]
                , MinString([$(CreateDataProfiling_sFieldName)]) as [Min String Value]
                , MaxString([$(CreateDataProfiling_sFieldName)]) as [Max String Value]
                , Min([$(CreateDataProfiling_sFieldName)]) as [Min Value]
                , Max([$(CreateDataProfiling_sFieldName)]) as [Max Value]
                , Min(Len([$(CreateDataProfiling_sFieldName)])) as [Min Length]
                , Max(Len([$(CreateDataProfiling_sFieldName)])) as [Max Length]
                , Mode([$(CreateDataProfiling_sFieldName)]) as [Mode]
                , Median([$(CreateDataProfiling_sFieldName)]) as [Median]
                , Avg([$(CreateDataProfiling_sFieldName)]) as [Average]
                , if(max(len(keepchar(lower([$(CreateDataProfiling_sFieldName)]), 'abcdefghijklmnopqrstuvwxyz'))) > 0, 'Yes', 'No') as [Has Alpha]
                , if(max(len(keepchar(lower([$(CreateDataProfiling_sFieldName)]), '0123456789'))) > 0, 'Yes', 'No') as [Has Number]
                , if(max(len(purgechar(lower([$(CreateDataProfiling_sFieldName)]), '0123456789abcdefghijklmnopqrstuvwxyz'))) > 0
                    , 'Yes', 'No') as [Has Non Alhpa Num]
                , Sum(if(isnull([$(CreateDataProfiling_sFieldName)]), 1, 0)) as [Null Values]
                , Sum(if([$(CreateDataProfiling_sFieldName)] = '', 1, 0)) as [Blank Values]
                , Sum(if(Trim(Replace([$(CreateDataProfiling_sFieldName)], ' ', '')) = '', 1, 0)) as [Whitespaced Values]
                , Sum(if([$(CreateDataProfiling_sFieldName)] = 0, 1, 0)) as [Zero Values]
                , Sum(if(Len(Trim(Right([$(CreateDataProfiling_sFieldName)], 1)))
                         < Len(Right([$(CreateDataProfiling_sFieldName)], 1))
                         and Trim(Replace([$(CreateDataProfiling_sFieldName)], ' ', '')) <> ''
                         , 1, 0)
                    ) as [Whitespaces in the end]
            Resident [$(CreateDataProfiling_sTableName)];

            // Fill the Stats table
            $(CreateDataProfiling_sStatsTable)
            Load * Resident tmpDataProfilingStat;
            Drop Tables tmpDataProfilingStat;

            Let CreateDataProfiling_sStatsTable = 'Concatenate(DataProfilingStats)';
        Next CreateDataProfiling_sFieldIndex
    Next CreateDataProfiling_sTableIndex

    Trace CreateDataProfiling_sFieldIndex = $(CreateDataProfiling_sFieldIndex);

    // If data model is not empty...
    if CreateDataProfiling_sFieldIndex > -1 then
        // Define key (common) fields
        Left Join(DataProfilingStats)
        Load
            [Field Name]
            , If(Count([Field Name]) > 1, Dual('Yes', 1), Dual('No', 0)) as [Is Key]
        Resident
            DataProfilingStats
        Group By
            [Field Name]
        ;
    EndIf

    // Define formulas for KPIs via the following parameters:
    // - KPISource - is the FROM part of the LOAD operator, including Autogenerate, etc.
    // - KPI - is the KPI name
    // - KPIFormulaAbsolute - is the formula for absolute KPI value
    // - KPIFormulaPercentage - is the formula for relatinv KPI value in percents
    // - KPIGroupBy - is the GROUP BY clause of the LOAD operator (not use so far, but... who knows)
    KPIs:
    Load * Inline "
        KPISource; KPI; KPIFormulaAbsolute; KPIFormulaPercentage; KPIGroupBy
        Resident DataProfilingStats; No. of key fields; Count(Distinct if([Is Key] = 'Yes', [Field Name])); Count(Distinct if([Is Key] = 'Yes', [Field Name])) / Count(Distinct [Field Name]);
        Resident DataProfilingStats; No. of 100% filled fields; Count(Distinct if([Null Values] = 0 and [Blank Values] = 0, [Field Name])); Count(Distinct if([Null Values] = 0 and [Blank Values] = 0, [Field Name])) / Count(Distinct [Field Name]);
        Autogenerate 1; No. of tables; NoOfTables() - 3; 1;
    " (delimiter is ';');

    // Calculate KPIs
    for CreateDataProfiling_sFieldIndex = 0 to NoOfRows('KPIs') - 1
        Let CreateDataProfiling_KPISource = Peek('KPISource', CreateDataProfiling_sFieldIndex, 'KPIs');
        Let CreateDataProfiling_sKPI = Peek('KPI', CreateDataProfiling_sFieldIndex, 'KPIs');
        Let CreateDataProfiling_sKPIFormulaAbsolute = Peek('KPIFormulaAbsolute', CreateDataProfiling_sFieldIndex, 'KPIs');
        Let CreateDataProfiling_sKPIFormulaPercentage = Peek('KPIFormulaPercentage', CreateDataProfiling_sFieldIndex, 'KPIs');
        Let CreateDataProfiling_sKPIGroupBy = Peek('KPIGroupBy', CreateDataProfiling_sFieldIndex, 'KPIs');

        DataProfilingKPIs:
        Load
            '$(CreateDataProfiling_sKPI)' as [KPI Name]
            , $(CreateDataProfiling_sKPIFormulaAbsolute) as [KPI Absolute Value]
            , $(CreateDataProfiling_sKPIFormulaPercentage) as [KPI Percentage Value]
        $(CreateDataProfiling_KPISource)
         	$(CreateDataProfiling_sKPIGroupBy)
        ;
    next CreateDataProfiling_sFieldIndex

    // Clean the temp data and variables
    Drop Table KPIs;

    CreateDataProfiling_sTableIndex=;
    CreateDataProfiling_sTableName=;
    CreateDataProfiling_sFieldIndex=;
    CreateDataProfiling_sFieldName=;
    CreateDataProfiling_sStatsTable=;
    CreateDataProfiling_KPISource=;
    CreateDataProfiling_sKPI=;
    CreateDataProfiling_sKPIFormulaAbsolute=;
    CreateDataProfiling_sKPIFormulaPercentage=;
    CreateDataProfiling_sKPIGroupBy=;

EndSub;
/*
	Drops tables, if they exist
    Parameters:
     - @pDropTable_TableNames - list of Qlik table names delimited with comma
*/

Sub DropTable(pDropTable_TableNames)
	// Space sign for Trace
	if Len('$(pDropTable_TableNames)') > 0 then
		pDropTable_TableNames = '''' & Replace(pDropTable_TableNames, ',', ''',''') & '''';
		for each pDropTable_TableName in $(pDropTable_TableNames)
			pDropTable_TableName = Trim(pDropTable_TableName);
			if TableNumber('$(pDropTable_TableName)') >=0 then
				Drop Table [$(pDropTable_TableName)];
			End If
		next pDropTable_TableName
	End If
	
    pDropTable_TableNames=;
	pDropTable_TableName=;
End Sub;

// A proxy method just in case ;-)
Sub DropTables(pDropTable_TableNames)
	Call DropTable(pDropTable_TableNames);
End Sub;
/*
	Checks and returns file presence flag

    Parameters:
     - @$1 - file name with full path and extesion

	Usage sample:
		if $(FileExists($(sOriginFile))) and ($(NewerFile($(sOriginFile), $(sDestinationFile)))) then
		...
		end if
*/
Set FileExists = if(FileSize('$1') > 0, True(), False());
/*
	Loads the specified QVD file $(pLoadQVD_FileName) into Qlik table
	in the $(pLoadQVD_QlikTableName), if specified, otherwise, the QVW file
	name is used as the table name.
	Existing Qlik table can either be replaced (bydefault) or added,
	depending of the mode.

    Parameters:
     - @pLoadQVD_FileName - file full path
     - @pLoadQVD_QlikTableName - Qlik table name
	 - @pLoadQVD_LoadMode - load mode:
		- r or R - replace (default)
		- a or A - append (concatenate)

	Usage sample:
		Call LoadQVD('$(sDestinationFile)', 'tmpData');
*/
Sub LoadQVD(pLoadQVD_FileName, pLoadQVD_QlikTableName, pLoadQVD_LoadMode)

	// Check, whether the QVD exists
	if $(FileExists($(pLoadQVD_FileName))) then
		// Get table name
		If Len(pLoadQVD_QlikTableName) < 1 then
			pLoadQVD_QlikTableName
				= SubField(SubField(pLoadQVD_FileName, '/', -1), '.', 1);
		End If

		// Get mode - A is only possible if the table does already exist
		pLoadQVD_LoadMode = Upper(pLoadQVD_LoadMode);
		If Len(pLoadQVD_LoadMode) < 1 then
			pLoadQVD_LoadMode = 'R';
		ElseIf 'A' = pLoadQVD_LoadMode and IsNull(TableNumber('$(pLoadQVD_QlikTableName)')) then
			pLoadQVD_LoadMode = 'R';
		End If
		
		// Check whether table exists and should the table be replaced or not
		If TableNumber('$(pLoadQVD_QlikTableName)') >=0 and 'R' = pLoadQVD_LoadMode then
			Trace [LoadQVD] Dropping the table: $(pLoadQVD_QlikTableName);
			Drop Table [$(pLoadQVD_QlikTableName)];
		End If

		// Get table name clause
		If 'R' = pLoadQVD_LoadMode then
			pLoadQVD_QlikTableName = '[$(pLoadQVD_QlikTableName)]:';
		ElseIf 'A' = pLoadQVD_LoadMode then
			pLoadQVD_QlikTableName = 'Concatenate([$(pLoadQVD_QlikTableName)])';
		End If

		// Load the QVD in to the table
		$(pLoadQVD_QlikTableName)
		Load * From [$(pLoadQVD_FileName)] (qvd);
	Else
		Trace [LoadQVD] There is no file: $(pLoadQVD_FileName);
	End If
	
  	pLoadQVD_FileName=;
    pLoadQVD_QlikTableName=;
	pLoadQVD_LoadMode=;
EndSub;
/*
	Compares time of origin and destination files and returns True()
	if origin one is newer, otherwise returns False()

    Parameters:
     - @$1 - origin file with full path and extension, text
	 - @$2 - destination file, supposed to be rewritten, with full path and extension, text

	Usage sample:
		if $(FileExists($(sOriginFile))) and ($(NewerFile($(sOriginFile), $(sDestinationFile)))) then
		...
		end if
*/
Set NewerFile = if(Alt(FileTime('$1'), 0) * 1000000000 > Alt(FileTime('$2'), 0) * 1000000000, True(), False());
/*
	Clean up QLib variables

	Usage sample:
		Call QLibCleanUp;
*/
Sub QLibCleanUp
	FileExists=;
	NewerFile=;
EndSub;
/*
	Shows nubmer of rows in the table

    Parameters:
     - @pShowNoOfRows_TableNames - list of Qlik table names delimited with comma
	 - @pShowNoOfRows_Comment - text of optional comment

	Usage sample:
		Call ShowNoOfRows('tmpData');
*/

Sub ShowNoOfRows(pShowNoOfRows_TableNames, pShowNoOfRows_Comment)
	// Space sign for Trace
	if Len('$(pShowNoOfRows_TableNames)') > 0 then
		pShowNoOfRows_TableNames = '''' & Replace(pShowNoOfRows_TableNames, ',', ''',''') & '''';
		for each pShowNoOfRows_TableName in $(pShowNoOfRows_TableNames)
			pShowNoOfRows_TableName = Trim(pShowNoOfRows_TableName);
			if TableNumber('$(pShowNoOfRows_TableName)') >=0 then
				Let pShowNoOfRows_NoOfRows = NoOfRows('$(pShowNoOfRows_TableName)');
				If (Len(pShowNoOfRows_Comment) > 0) then
					pShowNoOfRows_Comment = ' (' & pShowNoOfRows_Comment & ')';
				End If
				Trace [ShowNoOfRows]: $(pShowNoOfRows_NoOfRows) rows in [$(pShowNoOfRows_TableName)]$(pShowNoOfRows_Comment);
			Else
				Trace [ShowNoOfRows]: NO TABLE [$(pShowNoOfRows_TableName)];
			End If
		next pShowNoOfRows_TableName
	Else
		Trace [ShowNoOfRows]: NO SUCH TABLE(S);
	End If

	pShowNoOfRows_NoOfRows=;
	pShowNoOfRows_TableNames=;
    pShowNoOfRows_TableName=;
	pShowNoOfRows_Comment=;
End Sub;/*
	Stores Qlik table $(pStoreQVD_QlikTableName) as QVD-file $(pStoreQVD_FileName).

    Parameters:
     - @pStoreQVD_QlikTableName - Qlik table name
     - @pStoreQVD_FileName - file full path
	 - @pStoreQVD_NoDrop - flag for drop operation, it's True() by default,
                           otherwise it's False()
	 - @pStoreQVD_ZeroRowStore - flag for zero row tables, it's True() by
                                 default, otherwise it's False()

	Usage sample:
		Call StoreQVD('tmpData', '$(sDestinationFile)');
*/
Sub StoreQVD(pStoreQVD_QlikTableName, pStoreQVD_FileName, pStoreQVD_NoDrop, pStoreQVD_ZeroRowStore)

	// Store zero row tables by default, but check pStoreQVD_ZeroRowStore
	if IsNull(pStoreQVD_ZeroRowStore) then
		pStoreQVD_ZeroRowStore = True()
	ElseIf pStoreQVD_ZeroRowStore <> True() Then
		pStoreQVD_ZeroRowStore = False()
	End If

	// Check whether table exists and should the empty table be stored
	if TableNumber('$(pStoreQVD_QlikTableName)')>=0 and (pStoreQVD_ZeroRowStore or NoOfRows('$(pStoreQVD_QlikTableName)') > 0) then
		// Drop tables by default, but check the pStoreQVD_NoDrop
		if IsNull(pStoreQVD_NoDrop) then
			pStoreQVD_NoDrop = True()
		ElseIf pStoreQVD_NoDrop <> True() Then
			pStoreQVD_NoDrop = False()
		End If

		if $(FileExists($(pStoreQVD_FileName))) then
			Trace [StoreQVD] Rewriting: $(pStoreQVD_FileName);
		Else
			Trace [StoreQVD] Storing: $(pStoreQVD_FileName);
		End If

		Store [$(pStoreQVD_QlikTableName)] into [$(pStoreQVD_FileName)] (qvd);
		
		// Drop if needed
		if pStoreQVD_NoDrop then
			Drop Table [$(pStoreQVD_QlikTableName)];
		End If
	End If
	
    pStoreQVD_QlikTableName=;
  	pStoreQVD_FileName=;
	pStoreQVD_NoDrop=;
	pStoreQVD_ZeroRowStore=;
EndSub;
/*
	Traces message in the frame with indent

    Parameters:
     - @pTrace_msg - message text
	 - @pTrace_Indent - indent, 4 by default
	 - @pTrace_FrameSign - frame sign, * by default

	Usage sample:
		 Call Trace('Loading data for $(sYearMonth) from all the files...', 1, '=');
*/
Sub Trace(pTrace_msg, pTrace_Indent, pTrace_FrameSign)
	// Space sign for Trace
	Let sTrace_Space = chr(847);
    
    if Alt(pTrace_Indent, 0) = 0 then
    	Let pTrace_Indent = Repeat(' ', 4);
    Else
    	Let pTrace_Indent = Repeat(' ', Num(pTrace_Indent));
    EndIf

    if IsNull(pTrace_FrameSign) or Len(pTrace_FrameSign) > 1 then
    	Let pTrace_FrameSign = Repeat('*', 50);
    Else
    	Let pTrace_FrameSign = Repeat(pTrace_FrameSign, 50);
    EndIf

    Trace $(sTrace_Space)
$(pTrace_Indent)$(pTrace_FrameSign)
$(pTrace_Indent)$(pTrace_msg)
$(pTrace_Indent)$(pTrace_FrameSign);
	pTrace_msg=;
	sTrace_Space=;
    pTrace_Indent=;
    pTrace_FrameSign=;
End Sub;
/*
	Returns Qlik server name basing on the ComputerName() value

	Usage sample:
		'https://$(=$(vQlikServerURL))/sense/app/'

    Note: ComputerName() value depends on the host the script is executed on,
	      so, in case your publisher server is running on a separate host, you
		  will inevitebly get different values in the task running on
		  the publisher server and in the script editor
*/

Set vQlikServerURL = Pick(Match(ComputerName(), 'LOCALHOST'), 'BI.YOU.DOMAIN');