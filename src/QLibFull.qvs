// Autogenerated QLib Full Library 
/*
	AddMonth adds a number of months to the specified variable formatted as YYYYMM
    
    Parameters:
    	@inVarName - the variabel name
        @inMonths - number of months to be added, including negative ones
        
    Usage sample:
		Call AddMonth('sYYYYMM', -12);
*/
Sub AddMonth(inVarName, inMonths)
	if (Len($(inVarName)) = 6) and (Len(inMonths) > 0) and (0 <> inMonths) then
		Let sAddMonth_Y = Left($(inVarName), 4);
        Let sAddMonth_M = Floor(Right($(inVarName), 2));
        Let $(inVarName) = Year(AddMonths(MakeDate(sAddMonth_Y, sAddMonth_M), inMonths)) * 100 + Month(AddMonths(MakeDate(sAddMonth_Y, sAddMonth_M), inMonths));
        sAddMonth_Y=;
        sAddMonth_M=;
        sAddMonth_Res=;
    EndIf
EndSub
;/*******************************************************************************
	Data profiling procedure calculated data quality measures and KPIs

    Version: 0.2
    Author: Maksim Senin
    Date created: 2022-04-27
    Date modified: 2022-06-30
    Desription:
	Data Profiling logic, universal for any data model.
    Each measure is calculated for each field individually.

	Usage sample:
		Call CreateDataProfiling;
--------------------------------------------------------------------------------
    Version: 0.2
    Author: Maksim Senin
    Date modified: 2022-06-30
    Changes:
    - Added KPI formulas logic
    - Added the following measures and KPIs:
        Min/Max number values
		No. of key fields
        No. of filled fields
        No, of tables
        Mode()
        Median()
        Avg()
        No. of 100% filled rows
        Absolute and Percentage values
        Whitespace Values
        Zero values
        EPV (Expected Population Value) data quality index
        Whitespaces in the end
--------------------------------------------------------------------------------
    Version: 0.1
    Author: Maksim Senin
    Date modified: 2022-06-30
    Changes:
    - Initial version
*******************************************************************************/

Sub CreateDataProfiling
	// UI variables for data profiling
	Let vShownValues = 'Absolute';
	Let vAbsoluteFormat = '#' & chr(160) & '##0';
	Let vPercentageFormat = '#' & chr(160) & '##0,0%';

    // Stats table name for Load
    Let CreateDataProfiling_sStatsTable = 'DataProfilingStats: NoConcatenate';

    Let CreateDataProfiling_sFieldIndex = -1; // Indicator of empty data model

    // Go through tables
    for CreateDataProfiling_sTableIndex = 0 to NoOfTables()-1

        // Get table name
        Let CreateDataProfiling_sTableName = TableName(CreateDataProfiling_sTableIndex);
        Trace $(CreateDataProfiling_sTableIndex) - $(CreateDataProfiling_sTableName);

        // Go through fields of the table
        for CreateDataProfiling_sFieldIndex = 1 to NoOfFields(CreateDataProfiling_sTableName)

            // Get field name
            Let CreateDataProfiling_sFieldName = FieldName(CreateDataProfiling_sFieldIndex, CreateDataProfiling_sTableName);
            Trace |  >  $(CreateDataProfiling_sFieldIndex) - $(CreateDataProfiling_sFieldName);

            // Load table and field name for stats table
            tmpDataProfilingStat:
            Load
                '$(CreateDataProfiling_sTableName)' as [Table Name]
                , '$(CreateDataProfiling_sFieldName)' as [Field Name]
                , NoOfRows('$(CreateDataProfiling_sTableName)') as [No. of rows]
            AutoGenerate 1;

            // Calculate and join statistics
            Left Join(tmpDataProfilingStat)
            Load
                Count([$(CreateDataProfiling_sFieldName)]) as Count
                , Count(Distinct [$(CreateDataProfiling_sFieldName)]) as [Distinct Values]
                , MinString([$(CreateDataProfiling_sFieldName)]) as [Min String Value]
                , MaxString([$(CreateDataProfiling_sFieldName)]) as [Max String Value]
                , Min([$(CreateDataProfiling_sFieldName)]) as [Min Value]
                , Max([$(CreateDataProfiling_sFieldName)]) as [Max Value]
                , Min(Len([$(CreateDataProfiling_sFieldName)])) as [Min Length]
                , Max(Len([$(CreateDataProfiling_sFieldName)])) as [Max Length]
                , Mode([$(CreateDataProfiling_sFieldName)]) as [Mode]
                , Median([$(CreateDataProfiling_sFieldName)]) as [Median]
                , Avg([$(CreateDataProfiling_sFieldName)]) as [Average]
                , if(max(len(keepchar(lower([$(CreateDataProfiling_sFieldName)]), 'abcdefghijklmnopqrstuvwxyz'))) > 0, 'Yes', 'No') as [Has Alpha]
                , if(max(len(keepchar(lower([$(CreateDataProfiling_sFieldName)]), '0123456789'))) > 0, 'Yes', 'No') as [Has Number]
                , if(max(len(purgechar(lower([$(CreateDataProfiling_sFieldName)]), '0123456789abcdefghijklmnopqrstuvwxyz'))) > 0
                    , 'Yes', 'No') as [Has Non Alhpa Num]
                , Sum(if(isnull([$(CreateDataProfiling_sFieldName)]), 1, 0)) as [Null Values]
                , Sum(if([$(CreateDataProfiling_sFieldName)] = '', 1, 0)) as [Blank Values]
                , Sum(if(Trim(Replace([$(CreateDataProfiling_sFieldName)], ' ', '')) = '', 1, 0)) as [Whitespaced Values]
                , Sum(if([$(CreateDataProfiling_sFieldName)] = 0, 1, 0)) as [Zero Values]
                , Sum(if(Len(Trim(Right([$(CreateDataProfiling_sFieldName)], 1)))
                         < Len(Right([$(CreateDataProfiling_sFieldName)], 1))
                         and Trim(Replace([$(CreateDataProfiling_sFieldName)], ' ', '')) <> ''
                         , 1, 0)
                    ) as [Whitespaces in the end]
            Resident [$(CreateDataProfiling_sTableName)];

            // Fill the Stats table
            $(CreateDataProfiling_sStatsTable)
            Load * Resident tmpDataProfilingStat;
            Drop Tables tmpDataProfilingStat;

            Let CreateDataProfiling_sStatsTable = 'Concatenate(DataProfilingStats)';
        Next CreateDataProfiling_sFieldIndex
    Next CreateDataProfiling_sTableIndex

    Trace CreateDataProfiling_sFieldIndex = $(CreateDataProfiling_sFieldIndex);

    // If data model is not empty...
    if CreateDataProfiling_sFieldIndex > -1 then
        // Define key (common) fields
        Left Join(DataProfilingStats)
        Load
            [Field Name]
            , If(Count([Field Name]) > 1, Dual('Yes', 1), Dual('No', 0)) as [Is Key]
        Resident
            DataProfilingStats
        Group By
            [Field Name]
        ;
    EndIf

    // Define formulas for KPIs via the following parameters:
    // - KPISource - is the FROM part of the LOAD operator, including Autogenerate, etc.
    // - KPI - is the KPI name
    // - KPIFormulaAbsolute - is the formula for absolute KPI value
    // - KPIFormulaPercentage - is the formula for relatinv KPI value in percents
    // - KPIGroupBy - is the GROUP BY clause of the LOAD operator (not use so far, but... who knows)
    KPIs:
    Load * Inline "
        KPISource; KPI; KPIFormulaAbsolute; KPIFormulaPercentage; KPIGroupBy
        Resident DataProfilingStats; No. of key fields; Count(Distinct if([Is Key] = 'Yes', [Field Name])); Count(Distinct if([Is Key] = 'Yes', [Field Name])) / Count(Distinct [Field Name]);
        Resident DataProfilingStats; No. of 100% filled fields; Count(Distinct if([Null Values] = 0 and [Blank Values] = 0, [Field Name])); Count(Distinct if([Null Values] = 0 and [Blank Values] = 0, [Field Name])) / Count(Distinct [Field Name]);
        Autogenerate 1; No. of tables; NoOfTables() - 3; 1;
    " (delimiter is ';');

    // Calculate KPIs
    for CreateDataProfiling_sFieldIndex = 0 to NoOfRows('KPIs') - 1
        Let CreateDataProfiling_KPISource = Peek('KPISource', CreateDataProfiling_sFieldIndex, 'KPIs');
        Let CreateDataProfiling_sKPI = Peek('KPI', CreateDataProfiling_sFieldIndex, 'KPIs');
        Let CreateDataProfiling_sKPIFormulaAbsolute = Peek('KPIFormulaAbsolute', CreateDataProfiling_sFieldIndex, 'KPIs');
        Let CreateDataProfiling_sKPIFormulaPercentage = Peek('KPIFormulaPercentage', CreateDataProfiling_sFieldIndex, 'KPIs');
        Let CreateDataProfiling_sKPIGroupBy = Peek('KPIGroupBy', CreateDataProfiling_sFieldIndex, 'KPIs');

        DataProfilingKPIs:
        Load
            '$(CreateDataProfiling_sKPI)' as [KPI Name]
            , $(CreateDataProfiling_sKPIFormulaAbsolute) as [KPI Absolute Value]
            , $(CreateDataProfiling_sKPIFormulaPercentage) as [KPI Percentage Value]
        $(CreateDataProfiling_KPISource)
         	$(CreateDataProfiling_sKPIGroupBy)
        ;
    next CreateDataProfiling_sFieldIndex

    // Clean the temp data and variables
    Drop Table KPIs;

    CreateDataProfiling_sTableIndex=;
    CreateDataProfiling_sTableName=;
    CreateDataProfiling_sFieldIndex=;
    CreateDataProfiling_sFieldName=;
    CreateDataProfiling_sStatsTable=;
    CreateDataProfiling_KPISource=;
    CreateDataProfiling_sKPI=;
    CreateDataProfiling_sKPIFormulaAbsolute=;
    CreateDataProfiling_sKPIFormulaPercentage=;
    CreateDataProfiling_sKPIGroupBy=;

EndSub;
/*
	The Cron script initializes Qlik variable intented to implement cron-like
	checks of time values.
    
    Variables:
		@vCronMinute - current minute
		@vCronHour - current hour
		@vCronDay - current month day number
		@vCronMonth - current month number
		@vCronWeekDay - current week day number
		@vCronYear - current year
		@vCronMDay($1) - returns month day based date/time
		@vCronWDay($1) - returns week day based date/time

    Usage sample with comments:
		Set vCron = '15 17 28 9 0'; // разделитель 1 (один) пробел

        //		     *  *  *  *  *  выполняемая команда
        //    		 -  -  -  -  -
        //     		 |  |  |  |  |
        //     		 |  |  |  |  ----- день недели (0—7) (воскресенье = 0 или 7)
        //     		 |  |  |  ------- месяц (1—12)
        //     		 |  |  --------- день (1—31)
        //     		 |  ----------- час (0—23)
		//		     ------------- минута (0—59)
        //    
        //    Все условия (времени запуска) проверяются по «логическому И»,
        //    кроме условий «день недели» и «день месяца» - указанные совместно,
        //    они обрабатываются по «логическому ИЛИ», то есть «по любому из дней»

		// The following returns current day in the 10th month of the current
		// year
    	Let vMDateTime = $(vCronMDay('* * 10 * *');

		// The following returns current day in the 10th month of the current
		// year, if this is the Sunday
		Let vWDateTime = $(vCronWDay('* * 10 * 0');
*/

//// ToDo: describing, getting and usging data sectioning logic
//// ToDo: describing and getting field list, including adopted one...
//// ToDo: process Where: conditions, increment, etc.
//// 2022-09-22: ToDo: проверка периодов по Cron, пока только точное время

Let vCronMinute = Minute(Now(1));
Let vCronHour = Hour(Now(1));
Let vCronDay = Day(Now(1));
Let vCronMonth = Floor(Month(Now(1)));
Let vCronWeekDay = Floor(WeekDay(Now(1)));
Let vCronYear = Year(Now(1));

Set vCronMDay = Timestamp(Timestamp#(
				if(SubField('$1', ' ', 1) = '*', 0 /*vCronMinute*/, SubField('$1', ' ', 1)) & ' ' &
				if(SubField('$1', ' ', 2) = '*', vCronHour, SubField('$1', ' ', 2)) & ' ' &
                if(SubField('$1', ' ', 3) = '*', vCronDay, SubField('$1', ' ', 3)) & ' ' &
                if(SubField('$1', ' ', 4) = '*', vCronMonth, SubField('$1', ' ', 4)) & ' ? ' &
                vCronYear
                ,'mm hh DD M ? YYYY'));

Set vCronWDay = Timestamp(Timestamp#(
				if(SubField('$1', ' ', 1) = '*', 0 /*vCronMinute*/, SubField('$1', ' ', 1)) & ' ' &
				if(SubField('$1', ' ', 2) = '*', vCronHour, SubField('$1', ' ', 2)) & ' ' &
                if(SubField('$1', ' ', 5) = '*', vCronDay, if(vCronWeekDay = SubField('$1', ' ', 5), vCronDay)) & ' ' &
                if(SubField('$1', ' ', 4) = '*', vCronMonth, SubField('$1', ' ', 4)) & ' ? ' &
                vCronYear
                ,'mm hh DD M ? YYYY'));/*
	Drops tables, if they exist
    Parameters:
     - @pDropTable_TableNames - list of Qlik table names delimited with comma
*/

Sub DropTable(pDropTable_TableNames)
	// Space sign for Trace
	if Len('$(pDropTable_TableNames)') > 0 then
		pDropTable_TableNames = '''' & Replace(pDropTable_TableNames, ',', ''',''') & '''';
		for each pDropTable_TableName in $(pDropTable_TableNames)
			pDropTable_TableName = Trim(pDropTable_TableName);
			if TableNumber('$(pDropTable_TableName)') >=0 then
				Drop Table [$(pDropTable_TableName)];
			End If
		next pDropTable_TableName
	End If
	
    pDropTable_TableNames=;
	pDropTable_TableName=;
End Sub;

// A proxy method just in case ;-)
Sub DropTables(pDropTable_TableNames)
	Call DropTable(pDropTable_TableNames);
End Sub;
/*
	Checks and returns file presence flag

    Parameters:
     - @$1 - file name with full path and extesion

	Usage sample:
		if $(FileExists($(sOriginFile))) and ($(NewerFile($(sOriginFile), $(sDestinationFile)))) then
		...
		end if
*/
Set FileExists = if(FileSize('$1') > 0, True(), False());
/*
	GenerateColorVariables - loads color codes and generates variables

	@sGenerateColorVariables_Mode - generation mode, case insensitive:
    	- Create (or empty) - generate color variables
        - Clean - clean color variables

	Usage example:
		Call GenerateColorVariables;
		Call GenerateColorVariables('clean');
*/
Sub GenerateColorVariables(sGenerateColorVariables_Mode, sGenerateColorVariables_CleanupData)

	If IsNull(sGenerateColorVariables_Cleanup) then
		Let sGenerateColorVariables_Cleanup = True();
	EndIf
	;
	
	If IsNull(sGenerateColorVariables_Mode) or 'CREATE' = Upper(sGenerateColorVariables_Mode) then
    	Let sGenerateColorVariables_Mode = 'CREATE';
    EndIf
    ;

	If 'CLEAN' = Upper(sGenerateColorVariables_Mode) then
    	Let sGenerateColorVariables_Mode = 'CLEAN';
    EndIf
    ;

	// Trace sGenerateColorVariables_Mode $(sGenerateColorVariables_Mode);
    
	If Len(sQVDBaseName) < 7 then
    	Let sQVDBaseName = 'lib://PM_QVD';
    EndIf
    ;

    tmpColors:
    CrossTable(ColorType, ColorValue)
    LOAD
        "Business name" as ColorName,
        D60,
        D40,
        D20,
        Base,
        L20,
        L40,
        L60,
        L80
    FROM
        [$(sQVDBaseName)/QVS/QLib/Visualizations/Colors.xlsx] (ooxml, embedded labels, table is Colors)
    Where
        Len("Business name") > 0
    ;

    CrossTable(ColorType, ColorValue)
    LOAD
        "Color name" as ColorName,
        D60,
        D40,
        D20,
        Base,
        L20,
        L40,
        L60,
        L80
    FROM
        [$(sQVDBaseName)/QVS/QLib/Visualizations/Colors.xlsx] (ooxml, embedded labels, table is Colors)
    Where
        Len("Color name") > 0
    ;

    CrossTable(ColorType, ColorValue)
    LOAD
        "Business name" as ColorName,
        Primary,
        Secondary,
        "Blue",
        "Green",
        Orange,
        "Red",
        "Black"
    FROM
        [lib://PM_QVD/QVS/QLib/Visualizations/Colors.xlsx] (ooxml, embedded labels, table is Bg)
    Where
        Len("Business name") > 0
    ;

    Colors:
    Load
        ColorName as "Color name"
        , ColorType as "Color Type"
        , '#' & Text(Upper(ColorValue)) as "Color Value"
    Resident tmpColors;

    Drop Table tmpColors;

    For sGenerateColorVariables_I = 0 to NoOfRows('Colors') - 1
		Let sGenerateColorVariables_ColorName = Replace(Trim(Peek('Color name', sGenerateColorVariables_I, 'Colors')), ' ', '');
        Let sGenerateColorVariables_ColorType = Replace(Trim(Peek('Color Type', sGenerateColorVariables_I, 'Colors')), ' ', '');
        Let sGenerateColorVariables_ColorValue = Replace(Trim(Peek('Color Value', sGenerateColorVariables_I, 'Colors')), ' ', '');
        
        // Trace sGenerateColorVariables_ColorName $(sGenerateColorVariables_ColorName) | sGenerateColorVariables_ColorType $(sGenerateColorVariables_ColorType) | sGenerateColorVariables_ColorValue $(sGenerateColorVariables_ColorValue);
        If 'Base' = sGenerateColorVariables_ColorType then
        	Let sGenerateColorVariables_ColorType = '';
        EndIf
        ;
        if 'CREATE' = sGenerateColorVariables_Mode then
        	Let v$(sGenerateColorVariables_ColorName)$(sGenerateColorVariables_ColorType) = '$(sGenerateColorVariables_ColorValue)';
        Else
        	Let v$(sGenerateColorVariables_ColorName)$(sGenerateColorVariables_ColorType)=;
        End If
    Next sGenerateColorVariables_I
	;
 
	if sGenerateColorVariables_CleanupData then
		Drop Table Colors;
	EndIf
	;
    
    sGenerateColorVariables_I=;
    sGenerateColorVariables_ColorName=;
    sGenerateColorVariables_ColorType=;
    sGenerateColorVariables_ColorValue=;
    sGenerateColorVariables_Mode=;
	sGenerateColorVariables_CleanupData=;
EndSub
;/*
	ListTables procedure lists all the existing table names vie Trace
*/
Sub ListTables
    For sListTables_I = 0 to NoOfTables() - 1
    	Let sListTables_TableName = TableName(sListTables_I);
        Trace Table $(sListTables_TableName) (index $(sListTables_I));
    Next sListTables_I
    ;
    sListTables_TableName=;
    sListTables_I=;
EndSub
;/*
	Loads the specified QVD file $(pLoadQVD_FileName) into Qlik table
	in the $(pLoadQVD_QlikTableName), if specified, otherwise, the QVD file
	name is used as the table name.
	Existing Qlik table can either be replaced (bydefault) or added,
	depending of the mode.

    Parameters:
     - @pLoadQVD_FileName - file full path
     - @pLoadQVD_QlikTableName - Qlik table name
	 - @pLoadQVD_LoadMode - load mode:
		- r or R - replace (default)
		- a or A - append (concatenate)
		- j/lj or J/LJ - left join
		- otherwise, the loading is not performed

	Usage sample:
		Call LoadQVD('$(sDestinationFile)', 'tmpData');
*/
Sub LoadQVD(pLoadQVD_FileName, pLoadQVD_QlikTableName, pLoadQVD_LoadMode)

	// Check, whether the QVD exists
	if $(FileExists($(pLoadQVD_FileName))) then
		// Get table name
		If Len(pLoadQVD_QlikTableName) < 1 then
			Let pLoadQVD_QlikTableName
				= SubField(SubField(pLoadQVD_FileName, '/', -1), '.', 1);
		End If
		;

		// Get mode - A is only possible if the table does already exist
		pLoadQVD_LoadMode = Upper(pLoadQVD_LoadMode);
		If Len(pLoadQVD_LoadMode) < 1 then
			pLoadQVD_LoadMode = 'R';
		ElseIf 'R' <> pLoadQVD_LoadMode and IsNull(TableNumber('$(pLoadQVD_QlikTableName)')) then
			pLoadQVD_LoadMode = 'R';
		End If
		;
		
		// Check whether table exists and should the table be replaced or not
		If TableNumber('$(pLoadQVD_QlikTableName)') >=0 and 'R' = pLoadQVD_LoadMode then
			Trace [LoadQVD] Dropping the table: $(pLoadQVD_QlikTableName);
			Drop Table [$(pLoadQVD_QlikTableName)];
		End If
		;

		// Get table name clause
		If 'R' = pLoadQVD_LoadMode then
			pLoadQVD_QlikTableName = '[$(pLoadQVD_QlikTableName)]:';
		ElseIf 'A' = pLoadQVD_LoadMode then
			pLoadQVD_QlikTableName = 'Concatenate([$(pLoadQVD_QlikTableName)])';
		ElseIf 'LJ' = pLoadQVD_LoadMode then
			pLoadQVD_QlikTableName = 'Left Join([$(pLoadQVD_QlikTableName)])';
		Else
			// Make table name empty in order to avoid unsupported load modes
			pLoadQVD_QlikTableName = '';
		End If
		;

		if Len(pLoadQVD_QlikTableName) > 0 then
			// Load the QVD into the table
			$(pLoadQVD_QlikTableName)
			Load * From [$(pLoadQVD_FileName)] (qvd);
		End If
		;
	Else
		Trace [LoadQVD] There is no file: $(pLoadQVD_FileName);
	End If
	;
	
  	pLoadQVD_FileName=;
    pLoadQVD_QlikTableName=;
	pLoadQVD_LoadMode=;
EndSub;
/*
	Compares time of origin and destination files and returns True()
	if origin one is newer, otherwise returns False()

    Parameters:
     - @$1 - origin file with full path and extension, text
	 - @$2 - destination file, supposed to be rewritten, with full path and extension, text

	Usage sample:
		if $(FileExists($(sOriginFile))) and ($(NewerFile($(sOriginFile), $(sDestinationFile)))) then
		...
		end if
*/
Set NewerFile = if(Alt(FileTime('$1'), 0) * 1000000000 > Alt(FileTime('$2'), 0) * 1000000000, True(), False());
/*
	Clean up QLib variables

	Usage sample:
		Call QLibCleanUp;
*/
Sub QLibCleanUp
	FileExists=;
	NewerFile=;
EndSub;
/*
	RunDataLoader procedure initiates massive data loading according to settings
    provided in the "Data Loader Configuration.xlsx" configuration file, stored
    under the "Data Loader" folder of the source folder
    
    Dependencies:
		Trace.qvs
		Cron.qvs
		DropTables.qvs
		StoreQVD.qvs
		
	Parameters:
		@sRunDataLoader_SourceFolder - source folder name
		@sRunDataLoader_Queue - queue identifier

    Usage sample:
    	Call RunDataLoader('lib://Source Folder/Source A');
*/

// 2022-09-29: ToDo:
// - проверка периодов по Cron, пока только точное время
// - поддержка inctemental loading
// - поддержка сохранения загруженной таблицы по периодам их поля LoadAndStoreField
// - поддержка Full loading по дате sFullExtract_StartDate
// - поддержка REST и web
// - поддержка ?FieldReduction

Sub RunDataLoader(sRunDataLoader_SourceFolder, sRunDataLoader_Queue)
	if IsNull(sRunDataLoader_Queue) then
		Let sRunDataLoader_Queue = 'and IsNull(Queue)';
	Else
		Let sRunDataLoader_Queue = 'and Queue = ''$(sRunDataLoader_Queue)''';
	EndIf
	;
	
	if Len(vCronMDay) = 0 then
		$(Must_Include=$(QLibBasePath)/Cron.qvs);
	EndIf
	;
	
	// Build config. file name
	Let sRunDataLoader_ConfigFileName = '$(sRunDataLoader_SourceFolder)/Data Loader/Data Loader Configuration.xlsx';
	
	// Generate preset Qlik Sense variables
	Variables:
	Load
		VarOperator
		, VarName
		, VarDefinition
		, ?VarActive
    FROM
		[$(sRunDataLoader_ConfigFileName)] (ooxml, embedded labels, table is Variables)
    Where
    	?VarActive = 1
		and VarType = 'QlikSense';
    ;
	
	// Process variable data
    For sRunDataLoader_Var = 0 to NoOfRows('Variables') - 1
		Let sRunDataLoader_VarOperator = Peek('VarOperator', sRunDataLoader_Var, 'Variables');
		Let sRunDataLoader_VarName = Peek('VarName', sRunDataLoader_Var, 'Variables');
		Let sRunDataLoader_VarDefinition = Peek('VarDefinition', sRunDataLoader_Var, 'Variables');
		If Len(sRunDataLoader_VarOperator) > 0 and Len(sRunDataLoader_VarName) > 0 and Len(sRunDataLoader_VarDefinition) > 0 then
			If Upper(sRunDataLoader_VarOperator) = 'LET' Then
				Let $(sRunDataLoader_VarName) = $(sRunDataLoader_VarDefinition);
			ElseIf Upper(sRunDataLoader_VarOperator) = 'SET' Then
				Set $(sRunDataLoader_VarName) = $(sRunDataLoader_VarDefinition);
			End If
		End If
		;
	Next sRunDataLoader_Var
	;
	
	Call DropTables('Variables');

	// Default variable settings, in case there are nothing is provide in the config. file
	If '' = sFullExtract_StartDate then
		// Load last two years in 'Full loading mode' by default
		Let sFullExtract_StartDate = floor(AddMonths(Today(), -12));
	End If
	;
	If '' = sPartialExtract_StartDate then
		// Load last two months in 'Partial loading mode' by default
		Let sPartialExtract_StartDate = floor(MonthStart(Today(), -2));
	End If
	;
	If '' = sReloadMode then
		Let	sReloadMode	= 'F'; // 'Full loading mode' by default
	End If
	;

    // Load active data sources info.
    Sources:
    LOAD
        "DB Name"
        , "Data Folder"
        , "Scheme Name"
        , "Data Connection"
    FROM
		[$(sRunDataLoader_ConfigFileName)] (ooxml, embedded labels, table is [Data Sources])
    Where
    	?Active = 1;
    ;
    
    // Process each data source
    For sRunDataLoader_Source = 0 to NoOfRows('Sources') - 1
    	Let sRunDataLoader_DBName = Peek('DB Name', sRunDataLoader_Source, 'Sources');
        Let sRunDataLoader_DataFolder = Peek('Data Folder', sRunDataLoader_Source, 'Sources');
        Let sRunDataLoader_SchemeName = Peek('Scheme Name', sRunDataLoader_Source, 'Sources');
        Let sRunDataLoader_DataConnection = Peek('Data Connection', sRunDataLoader_Source, 'Sources');

    	Call Trace('$(sRunDataLoader_Source) - $(sRunDataLoader_DBName)');
        
        Tables:
        LOAD
            "DB Name"
            , "Table Name"
            , "QVD Name"
            , ?StoreInSubFolder
            , Where
            , ?TablePart
			, Cron
			, LoadMode
			, WhereIncremental
			, StoringMode
			, LoadAndStoreField
			, ?FieldReduction
			, ?Active
			, "Select"
			, Queue
			, Comments
        FROM [$(sRunDataLoader_ConfigFileName)] (ooxml, embedded labels, table is Tables)
        Where
            "DB Name" = '$(sRunDataLoader_DBName)'
			and Len("Table Name") > 0
            and ?Active = 1
			$(sRunDataLoader_Queue);
    	;
        
        if NoOfRows('Tables') > 0 then
        	Trace $(sRunDataLoader_DataFolder) | $(sRunDataLoader_SchemeName) | $(sRunDataLoader_DataConnection);
        	LIB Connect To '$(sRunDataLoader_DataConnection)';
            
            For sRunDataLoader_Table = 0 to NoOfRows('Tables') - 1
            	Let sRunDataLoader_TableName = Trim(Peek('Table Name', sRunDataLoader_Table, 'Tables'));
                Let sRunDataLoader_StoreInSubFolder = Peek('?StoreInSubFolder', sRunDataLoader_Table, 'Tables');
				Let sRunDataLoader_Cron = Upper(Peek('Cron', sRunDataLoader_Table, 'Tables'));
                Let sRunDataLoader_LoadMode = Upper(Peek('LoadMode', sRunDataLoader_Table, 'Tables'));
                Let sRunDataLoader_WhereIncremental = Upper(Peek('WhereIncremental', sRunDataLoader_Table, 'Tables'));
                Let sRunDataLoader_StoringMode = Upper(Peek('StoringMode', sRunDataLoader_Table, 'Tables'));
                Let sRunDataLoader_LoadAndStoreField = Upper(Peek('LoadAndStoreField', sRunDataLoader_Table, 'Tables'));
				Let sRunDataLoader_Select = Upper(Peek('Select', sRunDataLoader_Table, 'Tables'));
                
                // Задать имя выходного файла
                Let sRunDataLoader_QVDName = '$(sRunDataLoader_SourceFolder)/$(sRunDataLoader_SchemeName)/';
				
				// Взять имя QVD, если оно есть, если нет, то приравнять к имени таблицы
				Let sRunDataLoader_QVDName_tmp = Trim(Peek('QVD Name', sRunDataLoader_Table, 'Tables'));
				if Len(sRunDataLoader_QVDName_tmp) <= 0 then
					sRunDataLoader_QVDName_tmp = sRunDataLoader_TableName;
				EndIf
				;
				
				// Сформировать выражение для FROM - имя таблицы или подзапрос
				if Len(sRunDataLoader_Select) = 0 then
					Let vRunDataLoader_From = '"$(sRunDataLoader_SchemeName)"."$(sRunDataLoader_TableName)"';
				Else
					Let vRunDataLoader_From = '($(sRunDataLoader_Select)) T';
				EndIf
				;
				
                // Добавить подпапку, если нужно
                If 1 = sRunDataLoader_StoreInSubFolder then
                	Let sRunDataLoader_QVDName = sRunDataLoader_QVDName & sRunDataLoader_QVDName_tmp & '/';
                EndIf
                ;
                Let sRunDataLoader_QVDName = sRunDataLoader_QVDName & sRunDataLoader_QVDName_tmp;
                // Добавить маску периода
                If 'M' = sRunDataLoader_StoringMode then
                	Let sRunDataLoader_QVDName = sRunDataLoader_QVDName & '_#YYYY##MM#';
                EndIf
                ;
                Let sRunDataLoader_QVDName = sRunDataLoader_QVDName & '.qvd';

				// Проверить условие по Cron
				Let sRunDataLoader_UTCDelta = 1 / 8; // дельта времени файла относительно UTC
				if Len(sRunDataLoader_Cron) > 0 then
					// В качестве имени файла с периодом берём сегодняшние ГГГГ и ММ
					Let sRunDataLoader_QVDName_tmp = Replace(
                            						   Replace(sRunDataLoader_QVDName
                                                        , '#YYYY#', Year(Today(1))
                                                        )
                            							, '#MM#', Num(Month(Today(1)), '00')
                                                        );
					Let sRunDataLoader_FileTime = Timestamp(FileTime(sRunDataLoader_QVDName_tmp) + sRunDataLoader_UTCDelta);
					Let sRunDataLoader_CronMDay = $(vCronMDay($(sRunDataLoader_Cron)));
					Let sRunDataLoader_CronWDay = $(vCronWDay($(sRunDataLoader_Cron)));
					// Trace CRON: $(sRunDataLoader_Cron);
					// Trace FileName: $(sRunDataLoader_QVDName_tmp) | FileTime: $(sRunDataLoader_FileTime) | MDay: $(sRunDataLoader_CronMDay) | WDay: $(sRunDataLoader_CronWDay);
				EndIf
				;
				
				// Проверить условия по Cron, если (а) оно задано и файла нет ИЛИ (б) оно не задано ИЛИ (в) время дня месяца ИЛИ (в) дня недели по Corn больше времени файла
				if (Len(sRunDataLoader_Cron) > 0 and Len(sRunDataLoader_FileTime) = 0) or (Len(sRunDataLoader_Cron) = 0) or (sRunDataLoader_CronMDay > 0 and sRunDataLoader_CronMDay > sRunDataLoader_FileTime) or (sRunDataLoader_CronWDay > 0 and sRunDataLoader_CronWDay > sRunDataLoader_FileTime) then
					Trace Initiate data loading...;

					// Полная загрузка
					// ('F' = sReloadMode) or
					If ('F' = sRunDataLoader_LoadMode) then
						// Сохранение полной таблицы
						If 'F' = sRunDataLoader_StoringMode then
							Let sRunDataLoader_Where = Peek('Where', sRunDataLoader_Table, 'Tables');
							if Len(sRunDataLoader_Where) > 0 then
								Let sRunDataLoader_Where = 'WHERE $(sRunDataLoader_Where)';
							Else
								Let sRunDataLoader_Where = '';
							EndIf
							;

							Trace Loading and storing $(sRunDataLoader_QVDName)...;
							TableData:
			//                 Load Null() as F AutoGenerate 1; // DBG
							SQL Select
								*
			//                     count(*)
							From
								$(vRunDataLoader_From)
			//					"$(sRunDataLoader_SchemeName)"."$(sRunDataLoader_TableName)"
							$(sRunDataLoader_Where)
							;

							Call StoreQVD('TableData', '$(sRunDataLoader_QVDName)');
						// Сохранение загруженной таблицы по периодам из sRunDataLoader_StoringMode
						// по полю из LoadAndStoreField
						ElseIf Len(sRunDataLoader_LoadAndStoreField) > 0 then
							Trace TBD >> Storing loaded table per periods...;
						ElseIf Len(sRunDataLoader_StoringMode) = 0 then
							Trace There is no loading & storing mode provided in the "LoadAndStoreField" attribute for the table  "$(sRunDataLoader_TableName)";
						Else
							Trace To store the table "$(sRunDataLoader_TableName)" in the "$(sRunDataLoader_StoringMode)" mode you need set the "LoadAndStoreField" attribute;
						End If
						;
					// Partial loading stating from 
					ElseIf 'P' = sRunDataLoader_LoadMode then
						If (Len(sRunDataLoader_LoadAndStoreField)) > 0 and (Len(sRunDataLoader_WhereIncremental) > 0) then
							// Пока загрузка только помесячная
							Let sRunDataLoader_sStartDate = sFullExtract_StartDate;
							if 'P' = sReloadMode then
								Let sRunDataLoader_sStartDate = sPartialExtract_StartDate;
							End If
							;
							Let sRunDataLoader_sEndDate = Date(Today());
							
							// Get start year
							Let sRunDataLoader_sStartYear = Year(sRunDataLoader_sStartDate);

							if sRunDataLoader_sStartYear > Year(Today()) then
								Let sRunDataLoader_sStartYear = Year(Today());
							EndIf

							// Get start month
							Let sRunDataLoader_sStartMonth = Floor(Month(sRunDataLoader_sStartDate));

							If sRunDataLoader_sStartMonth < 1 or sRunDataLoader_sStartMonth > 12 then
								sRunDataLoader_sStartMonth = 1;
							End If

							// Cycle though months beginning form the start date year & month
							Let sRunDataLoader_sYearNo = sRunDataLoader_sStartYear;
							Let sRunDataLoader_sMonthNo = sRunDataLoader_sStartMonth;
							
							Do while (sRunDataLoader_sYearNo < Year(sRunDataLoader_sEndDate) and sRunDataLoader_sMonthNo <= 12) or (sRunDataLoader_sYearNo = Year(sRunDataLoader_sEndDate) and sRunDataLoader_sMonthNo <= Month(sRunDataLoader_sEndDate))
								Let sYYYYMM = sRunDataLoader_sYearNo * 100 + sRunDataLoader_sMonthNo;
								
								Let sRunDataLoader_Where = 'WHERE ' & Replace(
														   Replace(sRunDataLoader_WhereIncremental
															, '#YYYY#', sRunDataLoader_sYearNo
															)
															, '#MM#', Num(sRunDataLoader_sMonthNo, '00')
															);
								
								Let sRunDataLoader_QVDName_Final = Replace(
														   Replace(sRunDataLoader_QVDName
															, '#YYYY#', sRunDataLoader_sYearNo
															)
															, '#MM#', Num(sRunDataLoader_sMonthNo, '00')
															);
								Trace Loading and storing $(sRunDataLoader_QVDName_Final)...;
								TableData:
				//                 Load Null() as F AutoGenerate 1; // DBG
								SQL Select
									*
				//                     count(*)
								From
									$(vRunDataLoader_From)
				//					"$(sRunDataLoader_SchemeName)"."$(sRunDataLoader_TableName)"
								$(sRunDataLoader_Where)
								;

								Call StoreQVD('TableData', '$(sRunDataLoader_QVDName_Final)');

								// Get next yaer & month
								// ToDo: Get next quarter/week/day
								if sRunDataLoader_sMonthNo = 12 then
									Let sRunDataLoader_sMonthNo = 1;
									Let sRunDataLoader_sYearNo = sRunDataLoader_sYearNo + 1;
								Else
									Let sRunDataLoader_sMonthNo = sRunDataLoader_sMonthNo + 1;
								EndIf
							Loop
						Else
							Trace To load in the "$(sRunDataLoader_LoadMode)" mode you need to provide conditions in the "WhereIncremental" attribute and filed name in the "LoadAndStoreField" attribute;
						End If
						;
					ElseIf 'I' = sRunDataLoader_LoadMode then
						Trace TBD >> Incremental loading...;
					End If
					;
				Else
					Trace Skip data loading for $(sRunDataLoader_QVDName_tmp)...;
				EndIf
				;

            Next sRunDataLoader_Table
            ;

        EndIf
        ;
        
		Call DropTables('Tables');
        
    Next sRunDataLoader_Source
    ;

	Call DropTables('Sources');

	sFullExtract_StartDate=;
    sPartialExtract_StartDate=;
    sReloadMode=;
    sRunDataLoader_Source=;
    sRunDataLoader_DBName=;
    sRunDataLoader_DataFolder=;
    sRunDataLoader_SchemeName=;
    sRunDataLoader_DataConnection=;
    sRunDataLoader_ConfigFileName=;
    sRunDataLoader_Table=;
    sRunDataLoader_TableName=;
    sRunDataLoader_QVDName=;
    sRunDataLoader_QVDName_Final=;
    sRunDataLoader_StoreInSubFolder=;
    sRunDataLoader_LoadAndStoreField=;
    sRunDataLoader_WhereIncremental=;
    sRunDataLoader_Where=;
    sRunDataLoader_LoadMode=;
    sRunDataLoader_StoringMode=;
    sRunDataLoader_sStartDate=;
    sRunDataLoader_sEndDate=;
    sRunDataLoader_sYearNo=;
    sRunDataLoader_sStartYear=;
    sRunDataLoader_sMonthNo=;
    sRunDataLoader_sStartMonth=;
	sRunDataLoader_Var=;
	sRunDataLoader_VarOperator=;
	sRunDataLoader_VarName=;
	sRunDataLoader_VarDefinition=;
	sRunDataLoader_CronMDay=;
	sRunDataLoader_CronWDay=;
	sRunDataLoader_UTCDelta=;
	sRunDataLoader_QVDName_tmp=;
	sRunDataLoader_FileTime=;
	sRunDataLoader_Queue=;
	vRunDataLoader_From=;
EndSub
;/*
	Shows nubmer of rows in the table

    Parameters:
     - @pShowNoOfRows_TableNames - list of Qlik table names delimited with comma
	 - @pShowNoOfRows_Comment - text of optional comment

	Usage sample:
		Call ShowNoOfRows('tmpData');
*/

Sub ShowNoOfRows(pShowNoOfRows_TableNames, pShowNoOfRows_Comment)
	// Space sign for Trace
	if Len('$(pShowNoOfRows_TableNames)') > 0 then
		pShowNoOfRows_TableNames = '''' & Replace(pShowNoOfRows_TableNames, ',', ''',''') & '''';
		for each pShowNoOfRows_TableName in $(pShowNoOfRows_TableNames)
			pShowNoOfRows_TableName = Trim(pShowNoOfRows_TableName);
			if TableNumber('$(pShowNoOfRows_TableName)') >=0 then
				Let pShowNoOfRows_NoOfRows = NoOfRows('$(pShowNoOfRows_TableName)');
				If (Len(pShowNoOfRows_Comment) > 0) then
					pShowNoOfRows_Comment = ' (' & pShowNoOfRows_Comment & ')';
				End If
				Trace [ShowNoOfRows]: $(pShowNoOfRows_NoOfRows) rows in [$(pShowNoOfRows_TableName)]$(pShowNoOfRows_Comment);
			Else
				Trace [ShowNoOfRows]: NO TABLE [$(pShowNoOfRows_TableName)];
			End If
		next pShowNoOfRows_TableName
	Else
		Trace [ShowNoOfRows]: NO SUCH TABLE(S);
	End If

	pShowNoOfRows_NoOfRows=;
	pShowNoOfRows_TableNames=;
    pShowNoOfRows_TableName=;
	pShowNoOfRows_Comment=;
End Sub;/*
	Stores Qlik table $(pStoreQVD_QlikTableName) as QVD-file $(pStoreQVD_FileName).

    Parameters:
     - @pStoreQVD_QlikTableName - Qlik table name
     - @pStoreQVD_FileName - file full path
	 - @pStoreQVD_NoDrop - flag for drop operation, it's True() by default,
                           otherwise it's False()
	 - @pStoreQVD_ZeroRowStore - flag for zero row tables, it's True() by
                                 default, otherwise it's False()

	Usage sample:
		Call StoreQVD('tmpData', '$(sDestinationFile)');
*/
Sub StoreQVD(pStoreQVD_QlikTableName, pStoreQVD_FileName, pStoreQVD_NoDrop, pStoreQVD_ZeroRowStore)

	// Store zero row tables by default, but check pStoreQVD_ZeroRowStore
	if IsNull(pStoreQVD_ZeroRowStore) then
		pStoreQVD_ZeroRowStore = True()
	ElseIf pStoreQVD_ZeroRowStore <> True() Then
		pStoreQVD_ZeroRowStore = False()
	End If

	// Check whether table exists and should the empty table be stored
	if TableNumber('$(pStoreQVD_QlikTableName)')>=0

		if(pStoreQVD_ZeroRowStore or NoOfRows('$(pStoreQVD_QlikTableName)') > 0) then
			// Drop tables by default, but check the pStoreQVD_NoDrop
			if IsNull(pStoreQVD_NoDrop) then
				pStoreQVD_NoDrop = True()
			ElseIf pStoreQVD_NoDrop <> True() Then
				pStoreQVD_NoDrop = False()
			End If

			if $(FileExists($(pStoreQVD_FileName))) then
				Trace [StoreQVD] Rewriting: $(pStoreQVD_FileName);
			Else
				Trace [StoreQVD] Storing: $(pStoreQVD_FileName);
			End If

			Store [$(pStoreQVD_QlikTableName)] into [$(pStoreQVD_FileName)] (qvd);
		End If

		// Drop if needed
		if pStoreQVD_NoDrop then
			Drop Table [$(pStoreQVD_QlikTableName)];
		End If

	End If
	
    pStoreQVD_QlikTableName=;
  	pStoreQVD_FileName=;
	pStoreQVD_NoDrop=;
	pStoreQVD_ZeroRowStore=;
EndSub;
/*
	Stores Qlik table $(pStoreTable_QlikTableName) as a file $(pStoreTable_FileName)
	with the specified format $(pStoreTable_FileFormat) which is either qvd or txt.

    Parameters:
     - @pStoreTable_QlikTableName - Qlik table name
     - @pStoreTable_FileName - file full path
	 - @pStoreTable_FileFormat - file format
	 - @pStoreTable_NoDrop - flag for drop operation, it's True() by default,
                           otherwise it's False()
	 - @pStoreTable_ZeroRowStore - flag for zero row tables, it's True() by
                                 default, otherwise it's False()

	Usage sample:
		Call StoreTable('tmpData', '$(sDestinationFile)', 'txt');
*/
Sub StoreTable(pStoreTable_QlikTableName, pStoreTable_FileName, pStoreTable_FileFormat, pStoreTable_NoDrop, pStoreTable_ZeroRowStore)

	// Store zero row tables by default, but check pStoreTable_ZeroRowStore
	if IsNull(pStoreTable_ZeroRowStore) then
		pStoreTable_ZeroRowStore = True()
	ElseIf pStoreTable_ZeroRowStore <> True() Then
		pStoreTable_ZeroRowStore = False()
	End If
	
	if IsNull(pStoreTable_FileFormat) or Index(Lower(pStoreTable_FileFormat), 'qvd') >= 1 then
		pStoreTable_FileFormat = 'qvd';
	ElseIf Index(Lower(pStoreTable_FileFormat), 'txt') < 1 then
		pStoreTable_FileFormat = 'txt';
	EndIf

	// Check whether table exists and should the empty table be stored
	if TableNumber('$(pStoreTable_QlikTableName)')>=0 and (pStoreTable_ZeroRowStore or NoOfRows('$(pStoreTable_QlikTableName)') > 0) then
		// Drop tables by default, but check the pStoreTable_NoDrop
		if IsNull(pStoreTable_NoDrop) then
			pStoreTable_NoDrop = True()
		ElseIf pStoreTable_NoDrop <> True() Then
			pStoreTable_NoDrop = False()
		End If

		if $(FileExists($(pStoreTable_FileName))) then
			Trace [StoreTable] Rewriting: $(pStoreTable_FileName);
		Else
			Trace [StoreTable] Storing: $(pStoreTable_FileName);
		End If

		Store [$(pStoreTable_QlikTableName)] into [$(pStoreTable_FileName)] ($(pStoreTable_FileFormat));
		
		// Drop if needed
		if pStoreTable_NoDrop then
			Drop Table [$(pStoreTable_QlikTableName)];
		End If
	End If
	
    pStoreTable_QlikTableName=;
  	pStoreTable_FileName=;
	pStoreTable_FileFormat=;
	pStoreTable_NoDrop=;
	pStoreTable_ZeroRowStore=;
EndSub;
/*
	Traces message in the frame with indent

    Parameters:
     - @pTrace_msg - message text
	 - @pTrace_Indent - indent, 4 by default
	 - @pTrace_FrameSign - frame sign, * by default

	Usage sample:
		 Call Trace('Loading data for $(sYearMonth) from all the files...', 1, '=');
*/
Sub Trace(pTrace_msg, pTrace_Indent, pTrace_FrameSign)
	// Space sign for Trace
	Let sTrace_Space = chr(847);
    
    if Alt(pTrace_Indent, 0) = 0 then
    	Let pTrace_Indent = Repeat(' ', 4);
    Else
    	Let pTrace_Indent = Repeat(' ', Num(pTrace_Indent));
    EndIf

    if IsNull(pTrace_FrameSign) or Len(pTrace_FrameSign) > 1 then
    	Let pTrace_FrameSign = Repeat('*', 50);
    Else
    	Let pTrace_FrameSign = Repeat(pTrace_FrameSign, 50);
    EndIf

    Trace $(sTrace_Space)
$(pTrace_Indent)$(pTrace_FrameSign)
$(pTrace_Indent)$(pTrace_msg)
$(pTrace_Indent)$(pTrace_FrameSign);
	pTrace_msg=;
	sTrace_Space=;
    pTrace_Indent=;
    pTrace_FrameSign=;
End Sub;
/*
	Returns Qlik server name basing on the ComputerName() value

	Usage sample:
		'https://$(=$(vQlikServerURL))/sense/app/'

    Note: ComputerName() value depends on the host the script is executed on,
	      so, in case your publisher server is running on a separate host, you
		  will inevitebly get different values in the task running on
		  the publisher server and in the script editor
*/

Set vQlikServerURL = Pick(Match(ComputerName(), 'MSC01-SAS27T', 'MSC199-SAS27', 'MSC01-SAS25', 'MSC01-SAS38', 'MSC01-SAS40', 'MSC01-SAS60'), 'qsd.pgk.ru', 'qsp.pgk.ru', 'bi.pgk.ru', 'bi.pgk.ru', 'bi.pgk.ru/self', 'bi.pgk.ru/dev');